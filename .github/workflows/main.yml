name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      # get part of the tag after the `v`
      - name: Extract tag version number
        id: get_version
        uses: battila7/get-version-action@v2

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Download Links
        id: sub_manifest_link_for_drive
        uses: microsoft/variable-substitution@v1
        with:
          files: "module.json"
        env:
          version: ${{steps.get_version.outputs.version-without-v}}

      # Run the media-inator
      - name: Run Media-Inator
        run: node .github/media.mjs

      # Create a folder containing all the module stuff and zip it for the release
      - name: Create Zip
        run: zip -r9 ./module.zip module.json packs/ assets/ media/

      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./module.json, ./module.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}

      # Upload to FTP
      - name: Get FTP Path
        id: ftp
        env:
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        if: ${{ env.FTP_PASSWORD != '' }}
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "module.json"
          prop_path: "flags.path"

      - name: Get Module ID
        id: module_id
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "module.json"
          prop_path: "id"

      - name: Put Files into FTP Folder
        env:
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        if: ${{ env.FTP_PASSWORD != '' }}
        run: mkdir dist && cp module.json dist/ && cp module.zip dist/ && mkdir dist/${{steps.module_id.outputs.propStr}} && cp module.json dist/${{steps.module_id.outputs.propStr}}/

      - name: Upload FTP
        uses: sebastianpopp/ftp-action@releases/v2
        env:
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        if: ${{ env.FTP_PASSWORD != '' }}
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          localDir: "dist"
          remoteDir: ${{steps.ftp.outputs.propStr}}

      # Create a ping in the Discord server
      - name: Get Module Title
        id: title
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && !github.event.release.prerelease }}
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "module.json"
          prop_path: "title"

      - name: Send Discord Ping
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && !github.event.release.prerelease }}
        with:
          args: "${{ (steps.get_version.outputs.version-without-v == '1.0.0' && '<@&1127986401590382712>') || '' }} ${{steps.title.outputs.propStr}} has been updated to version `${{github.event.release.tag_name}}`!"
